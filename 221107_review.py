# -*- coding: utf-8 -*-

# 커밋 222222
# 커밋 333333

"""221107_review.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11JQaMyEnWYFVFmwtdN8gZwl7HJsivuVI

## 1. ???

### 1.1 출력

- 홑따옴표 쌍따옴표로 string 인식
"""

print ('안녕하세요')

print ("반갑습니다")

"""- 프린트 하지 않아도 맨 마지막줄은 출력

"""

'hello'
'python'

"""### 1.2 변수와 대입
- 변수는 데이터를 담는 그릇
- 데이터 타입을 지정해서 타입에 맞는 그릇의 크기 지정

#### 1.2.1 변수의 이름

- 알파벳 대문자, 소문자, 한글까지 가능
"""

a = 1
A = 2
변수 = 3
print (a)
print (A)
print (변수)

"""- 알파벳 + 숫자 가능
- 알파벳 + 언더바 가능
- 언더바 + 알파벳 가능
"""

a1 = 4
a_ = 5
_a = 6
print (a1)
print (a_)
print (_a)

"""- 숫자 + 알파벳 불가능
- 언더바 제외한 특수문자 불가능
- 변수이름 사이에 공백 불가능

#### 1.2.2 변수의 출력
"""

test = 10
print ('test')
print (test)

a = 123
print (a)

# 변수에 문자열도 가능
b = '안녕하세요'
print (b)

"""## 2. 파이썬 데이터 타입

### 2.1 숫자형 데이터

#### 2.1.1 정수형
"""

1+1

# a에 10, b에 5를 할당하고, a와 b를 더한 결과를 출력합니다.

a = 10
b = 5
print (a+b)
print (a-b)

"""#### 2.1.2 실수형"""

c = 3.14
c

c+ 3.14

# d에 4를 할당하고 c에서 d를 뺀 값을 출력합니다.

d = 4
c-d

e = 1.34E6 # E6 ; 10^6을 의미한다.
e2 = 1.34e-3
e, e2

e = 1.34E6
e

"""#### 숫자형 데이터타입이 제공하는 여러 연산자

##### 사칙연산
"""

# a에 10, b에 3을 할당하고 a와 b의 사칙연산 결과를 출력합니다. 이번에는 출력할때 print 함수를 사용합니다

a = 10
b = 3
print (a + b)
print (a - b)
print (a * b)
print (a / b)

# a에 10.3, b에 -1.6을 할당하고 사칙연산 결과를 출력합니다.

a = 10.3 
b = -1.6
print (a + b)
print (a - b)
print (a * b)
print (a / b)

"""##### 특수연산"""

c = 5
d = 2
print (c ** d) # c를 d번 곱한 것 = c^d
print (c // d) # c를 d로 나눈 몫
print (c % d) # c를 d로 나눈 나머지

"""#### 연습문제. 윤년 알아보기
Q. 어떤 연도를 N이라고 할 때, N이 윤년인지 아닌지 알아보는 방법은 무엇일까?  
   윤년 규칙. 
   1. N이 4의 배수이면서, 100의 배수가 아니거나
   2. 400의 배수면  
   윤년이다.
"""

N = 1604
((N % 4 == 0) and  (N % 100 != 0)) or (N % 100 == 0)

"""### 2.2 문자열
- 문자열 데이터란 문자의 나열. character sequence
- 파이썬에서 다룰 수 있는 문자열의 크기 제한이 없다
- 파이썬에서는 홑따옴표 겹따옴표 둘 다 사용 (홑따옴표를 더 많이 쓴당)
- 컴퓨터는 문자를 인코딩하여 숫자로 표현한다. ascii, utf-8..

#### 2.2.1 문자열을 만드는 여러가지 방법
"""

s = 'hello world'
s

s1 = "life is short"
s1

s2 = """to be great is
to be misunderstood.
- Ralpf Waldo Emerson """
print (s2)
s2

# 왜 파이썬은 쌍따옴표와 홑따옴표 모두 제공하는가?!
s3 = "i'm a boy."
s4  = 'she said, "go home!"'
print (s3)
print (s4)

"""#### 2.2.2 특수문자표현 익히기"""

# \n 엔터
print ("hello\nworld")

# \t tap
print ("hello\tworld")

"""#### 2.2.3 문자열 연산"""

# 문자열 더하기
s = "hello"
s1 = "world"
s + ' ' + s1  # 빈칸 ' ' 도 넣을 수 있음

# 문자열 곱하기
s2 = "hello "
s2 * 10

# 문자열의 길이를 출력하는 함수. 띄어쓰기와 마침표까지 셉니다
s3 = 'enjoy your life.'
len (s3)

"""#### 2.2.4 문자열 formatting"""

apple = '사과'
count = 4

# print formattiong
print ("%s는 %d개 있다" % (apple, count))
# s string, d integer f float

# str.format
print ("{}는 {}개 있다".format(apple, count))

# f-string
print (f"{apple}는 {count}개 있다")

"""개인정보를 사용자로부터 입력받아, 주민등록등본을 출력해주는 키오스크(Kiosk)용 프로그램을 제작하려고 한다.  
입력받은 이름을 name이라는 변수에, 주민번호 앞자리를 id라는 변수에 입력받았다면, 주민등록등본에 어떻게 출력해야 할까?  
뭔소리야
"""

name = '최은진'
id = 870704

print ("성명: %s, 주민등록번호: %i - *******" %(name, id))
print ("성명: {}, 주민등록번호: {} - *******".format(name, id))
print (f"성명: {name}, 주민등록번호: {id} - *******")

"""#### 2.2.5 문자열 관련 함수들

##### 대소문자 바꾸기
"""

s = 'hi'
s.upper()

s = "HI"
s.lower()

"""##### 문자 공백 지우기 strip()"""

# 문자와 문자 사이는 띄어쓰기로 인식해서 안 지우고 문자 밖에 있는 공백을 지워줌
s = '  h   i   '
s.strip()

"""##### 문자열 삽입 join()"""

# .join 앞에 있는 문자가 ()안에 있는 문자 사이사이에 들어감
"=".join("abcd")

"와 ".join("가나다라")

"아아".join("가나다")

"""##### 문자열 나누기 split()"""

# 띄어쓰기 기준으로 나뉨
s = 'life is too short.'
s.split()

"""##### 문자열 바꾸기 replace()"""

# 찾아바꾸기
s = 'life is too short'
s.replace('life', 'this pencil')

# 공백없애기도 가능
s.replace(" ", "")

"""### 2.3 연속형 데이터 (Sequential Data Types)
숫자 100개를 한번에 다루거나  
하나의 변수에 숫자 100개를 저장하고 싶거나.. 등등

#### 2.3.1 리스트 []

##### 리스트를 만드는 방법
"""

L = [1, 2, 3]
L

# 빈 리스트 만드는 방법 1
L1 = []
type (L1)

# 빈 리스트 만드는 방법 2
L2 = list()
type (L2)

# 리스트에는 다양한 타입의 원소를 포함할 수 있다
L3 = [1, 'hi', 3.14, [1, 2, 3]]
L3

"""##### indexing
리스트의 몇번째 칸인지를 인덱스라고 한다  
(배열에서 array[0] 에 [0] 같은거)
"""

L = [1, 2, 3, 4, 5]
L

# 0번 인덱스 값 = 첫번째 원소
L[0]

# 인덱스에 없는 값을 호출하면 에러남
L[8]

# 뒤에서부터 세기. 끝에서 n번째 라고 생각하면 될듯
L[-1], L[-2]

# 리스트의 연산. 첫번째값과 두번째값 더하기
L[0] + L[1]

# 리스트 안에 리스트
L2 = [1, [2, 3], 5]
L2

# L2의 1번 인덱스에 있는 리스트의 0번인덱스 값
L2[1] [0]

"""##### 슬라이싱
리스트와 비슷한 구조인 numpy array와 pandas series, dataframe에서도 이용  
리스트의 일부분만 잘라냄  
리스트의 index와 :를 사용하여 슬라이싱 한다
"""

L = [1,2,3,4,5]

# for (i= 0: i<2: i++) array[i] 
L[0:2]

L [1:4]

# 시작 인덱스를 생략하면 자동으로 0
L [:-1] # 0부터 뒤에서 첫번째보다 작을 때까지 = 뒤에서 두번째까지

# 끝 인덱스를 생략하면 마지막(=lng(L))까지
L [3:]

"""##### 리스트 연산하기"""

# 리스트 더하기
# 리스트 자체를 숫자로 인식하지 않고 리스트로 인식하기 때문에 숫자의 덧셈이 아님
L = [1, 2, 3]
L2 = [4, 5]
L + L2

# 리스트 곱하기
L * 3

"""##### 리스트 수정하기"""

# 리스트L의 2번 인덱스(3번째)를 1로 수정
L [2] = 1
L

L2 [0] = 7
L2

"""##### 리스트 관련 함수"""

# 리스트에 원소 추가하기 append()
L = []
L.append(3)
L.append(2)
L.append(1)
L.append(325)
L

"""리스트 추가 함수
insert 
L.insert(끼워넣을 인덱스 번호, 값)

extend
L.extend([])
리스트 L의 뒤에 extend로 넣은 리스트가 추가됨
"""

# 리스트 원소 정렬하기 sort()
L = [4, 3, 16, 1, 35]
L.sort()  # 오름차순정렬
L.sort(reverse=True) # 내림차순정렬
L

# 리스트 뒤집기 (내림차순 정렬x)
L = [1, 2, 5, 3, 4]
L [::-1]

# 리스트에서 원소 제거하기 pop()
L1 = L.pop()
print (L1)
L2 = L.pop()
print (L2) # 이게뭐지

# 리스트에서 원소 제거하기 remove
# 괄호 안의 값을 제거 (중복이면 앞에꺼 하나만)
L3 = [1, 2, 3, 5, 10, 3]
L3.remove(3)
L3

# 리스트에서 원소 제거하기 del
# ??? 모지
del L3[3]
L3

"""#### 2.3.2 튜플
- 리스트와 거의 비슷  
- 튜플은 선언할 때 () 사용  
- 튜플은 생성 후 변경이 불가
"""

# 1, 2를 원소로 가지는 튜플 생성
t = (1, 2)
t

# 빈 튜플 생성
t1 = ()
t1, type(t1)

t2 = ('a', 'b', ('a', 'b,'))
t2

t2[:2]
# 튜플 t2에 인덱스 0부터 1까지

# 튜플의 원소를 변경하려고 하면 에러납니당
t[0] = 3

# 튜플의 더하기
t = (1, 2)
t2 = (3, 4)
t + t2

# 튜플의 곱하기
t2 * 3

# 튜플의 길이
len(t*3)

"""#### 2.3.3 집합 (set)
- 집합은 원소의 중복을 허용하지 않는다
- 집합은 원소의 순서가 존재하지 않는다
"""

# 집합 만들기
s = {1, 2, 3, 3}
s, type(s)

# 집합은 순서가 없어서 인덱스도 없다 1번인덱스를 찾으라 그러면 에러남
s[1]

"""##### 집합의 연산"""

s1 = {1, 2, 3, 4, 5}
s2 = {3, 4, 5, 6, 7}

#교집합 찾기 1
s1 & s2

# 교집합 찾는법 2
s1.intersection(s2) # s1과 s2 자리를 바꿔도 물론 가능

# 합집합 구하는 법 1
s1 | s2

# 합집합 구하는 법 2
s1.union(s2)

# 집합의 단순 더하기 불가
s1 + s2

# 차집합 구하기 
s1 - s2

# 차집합은 순서도 중요. s1에서 교집합을 빼는 거랑 s2에서 교집합을 빼는 건 다름
s2 -s1

"""##### 집합 원소의 uniqueness를 활용하는 경우"""

L = [1, 2, 3, 3, 4, 1, 2, 34, 5, 6, 1, 2]
print (len(set(L)))
print (set(L))

"""##### 집합 관련 함수"""

# 집합에 원소 하나 추가하기 add()
s = set()
s.add(4)
s

# 집합에 여러 원소 추가하기 update()
s = {1, 2, 3}
s.update({4, 5})
s

# 집합에서 원소 제거하기 remove()
s.remove(3)
s

"""#### 2.3.4 사전 Dictionary
- 키값, 밸류값 가진 거! map이랑 비슷하군  
- 순서가 아닌 의미가 있는 값을 통해서 데이터 접근이 가능하다 (?)

##### 사전 만드는 법
"""

# 빈 사전 생성. set과 헷갈리지 않도록 주의
D = {}
type (D)

# 사전 만들기
D = {'john' : '0011', 'maria' : '1234'}
D['john']

# 사전에 원소 추가
D['a'] = 3 #a라는 키값이 없으므로 알아서 a가 키값으로 추가. 이미 있는 키값이면 밸류값 덮어씀
D

# 리스트는 이런식으로 넣으면 에러나영
L = [1, 2, 3]
L [3] = 4
L

# 키값이 중복되면 나중에 나온게 덮어쓰기함
D2 = {'a' : 1, 'a' : 2, 'b' : 3}
D2

"""##### 사전 관련 함수"""

# 사전의 모든 키값들 보기 keys()
D = {'name' : 'kim', 'phone' : '01012345678', 'birth' : '1234'}
D.keys()

# 사전의 모든 value들 보기 values()
D.values()

# 사전의 모든 key, value쌍 보기 items()
D.items()

# 사전의 원소 가져오기 get()
D.get('phone')

# 사전의 원소 가져오기. D.get('phone')과 같은 결과
D['phone']

# 사전에 해당 키값이 존재하는지 확인하기
'phone' in D

# 밸류값이 존재하는지 확인할 때는 밸류라고 써줘야되네요
'1234' in D.values()

"""## 연습문제

### 1. 학점계산기
- 영희는 1학기 중간고사의 학점을 알고 싶다
- 영희가 중간고사 때 수강한 과목과 학점은 다음과 같다.  

|글쓰기(3)|미적분학(3)|영문법특강(2)|컴퓨팅사고력(3)|  
| --- | --- | --- | --- |  
| A | C | B+ | A+ |  

- 과목이름 옆 괄호에 있는 숫자는 학점 수이고, 4.5만점 기준으로 성적이 계산된다.
> e.g. A+ : 4.5, A: 4.0, B+ : 3.5, B: 3.0 , C+ : 2.5, C: 2.0 
- 계산 공식은 다음과 같다.
> (3xA + 3 X C + 2 X B+ + 3 X A+ / (3+3+2+3)
"""



"""### 2. 십의 자리 구하기
* 숫자 하나를 입력 받는다. (입력하는 숫자는 무조건 두자리 이상의 자연수)
* 입력받는 숫자의 십의 자리 숫자를 출력한다.
"""

num = int(input('숫자를 입력하세요 '))
num = (num // 10) % 10
num

# 선생님 답
number = int(input('숫자를 입력하세요 '))
number % 100 // 10  
# % : 나눈 나머지  , // : 나눈 몫

"""### 3. 학습 결과 출력하기"""

epoch = 10
train_accuracy = 0.85; val_accuracy = 0.83; test_accaracy = 0.76
model_name = 'ResNet44'

# 답1

# 답2

# 답3

"""### 4. 주민등록번호 가리기"""

oldman_id = '911210-1234567'
oldwoman_id = '900101-2111111'

"""### 5. 호텔예약관리하기"""

book = [103, 205, 405]

# 어제 예약한 목록


# 오늘 예약한 목록

"""### 6. 키 순으로 줄세우기"""

heights = [175.3, 146, 184, 160, 167]
# 작->큰

# 큰->작