# -*- coding: utf-8 -*-
"""221108_re.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vvbBFjnkrQqx5wXfO9I9I7ucExFXI-pX

### 3.1 조건문

#### 파이썬에서 if문을 사용하는 방법
> ※if - else 짝 안 짓고 if만 단독으로 쓸 수 있음
"""

a = 5

if a == 5:
  print ("true")
  print ("python")
else:
  print ("false")
  print ("python")

a = 6

if a == 5:
  print ("true")
  print ("python")
else:
  print ("false")
  print ("python")

"""#### 조건문을 사용하기 위해선 비교연산과 논리연산을 알아야 한다"""

# a == b #같다
# a != b #다르다
# 크다, 작다 이상, 이하...

"""#### 자판기 만들기
> - 자판기에 입력된 돈이 300이면 커피를 주고  
- 300보다 적을 때는 돈을 그냥 돌려주고  
- 300원보다 많은 경우 커피와 함께 거스름돈을 돌려준다
"""

money = 300
if money == 300:
  print ("coffee")

money = 200
if money < 300:
  print ("%d원을 돌려줍니다" % money)
  print ("{}원을 돌려줍니다".format(money))
  print (f"{money}원을 돌려줍니다")

money = 1000
if money >300:
  print ("coffee")
  print ("%d원을 돌려줍니다" % (money-300))

"""#### 자판기 코드 합치기
> - 금액 입력받기
- else if문 elif
"""

money = int(input('돈을 넣어주세요 '))
if money == 300:
  print ("coffee")
elif money <300:
  print (f"{money}원을 돌려줍니다")
else:
  print ("coffee")
  print (f"{money-300}원을 돌려줍니다")

"""#### if - elif - else 말고 nested 구조 이용"""

money = int(input("금액을 넣어주세요 : "))
if money == 300:
  print ("coffee")
else:
  if money < 300:
    print (f"{money}원을 돌려줍니다")
  else:
    print ("coffee")
    print (f"{money-300}원을 돌려줍니다")
# 300원인지 아닌지를 먼저 판단하는 느낌이라 뭐가 중요한지 좀 더 눈에 들어옴

"""### 3.2 반복문 iterative statement
> 파이썬에서는 while, for 두가지 반복문을 제공

#### 3.2.1 while문
> - 조건을 만족할 때까지 반복한다

##### 구구단을 통한 while문 연습
"""

# 2단을 while문으로 구현
number = 1
while number < 10: # while (조건) 조건이 끝날때까지 반복해
  print ("2 × %d = %d" % (number, 2*number))
  number += 1

"""##### 커피가 다 떨어질 때까지 반복실행"""

# 자판기 커피 수량
coffee = 5
# 커피가 남아있는 동안 작동
while coffee > 0:
  money = int (input ("동전을 넣어주세요 "))
  if money == 300:
    print ("coffee")300
    23")
  else:
    print ("coffee")
    coffee -= 1
    print (f"{money-300}원을 돌려줍니다")
# false가 되면 들여쓰기 부분을 다 빠져나옴 
print ("커피가 모두 소진되었습니다. 관리자에게 문의해주세요")

"""#### 3.2.2 for문
> - while문은 조건이 만족하는동안 반복수행, for문은 지정횟수동안 반복수행
"""

# 원소가 1, 2, 3인 리스트의 원소를 하나하나 출력하는 반복문
L = [1, 2, 3]
for i in L: # for문 안에서만 쓰는 지역변수 i
  print(i)

# for문에서 문자열 자체를 인식하는 건 아니고 각각의 인덱스를 가져옴
coffees = ['아메리카노', '카페라떼', '카페모카', '바닐라라떼', '우애애앵']
for coffee in coffees: # coffees에 있는 값을 coffee에 넣어라
  print (coffee)

"""##### for문과 함께 자주 쓰이는 range()
- for문은 특정 횟수동안 반복을 하기 때문에 횟수를 자동으로 만들어주는 기능이 있으면 좋다
- range 함수는 특정 숫자 범위내의 값들을 자동으로 생성해주는 함수이다
- range(1, 5) 인 경우 1, 2, 3, 4를 차례로 생성 (i = 1; i <5; i++)
"""

for i in range (1, 6):
  print (i)

# range (시작값, 종료값, 증가폭)
# range (1, 10, 2) -> 1, 3, 5, 7, 9

# 6개의 음료와 음료의 가격이 담긴 리스트가 있다. 가지고 있는 돈이 5000원일 때 마실 수 있는 음료 찾기
coffees = ['아메리카노', '카페라떼', '카페모카', '바닐라라떼', '핸드드립', '콜드브루']
prices = [4100, 4600, 4600, 5100, 6000, 5000]

for i in range(len(coffees)): # coffees 안에 데이터가 몇개냐?! 
  if prices[i] <= 5000:
    print (coffees[i])

# 모든 음료 500원씩 할인할 경우 5000원으로 먹을 수 있는 모든 음료 찾기
coffees = ['아메리카노', '카페라떼', '카페모카', '바닐라라떼', '핸드드립', '콜드브루']
prices = [4100, 4600, 4600, 5100, 6000, 5000]

for i in range(len(coffees)): 
  if (prices[i] - 500) <= 5000:
    print (coffees[i])

"""##### 반복문을 제어하는 break, continue
- break 반복이 더이상 필요 없는 경우  
- continue 반복 중 특정 조건에만 건너뛸 때
"""

# 자판기의 커피 수량
coffee = 5

while True:
  money = int (input ("금액을 입력하세요 "))
  if (money < 0 or coffee == 0)33: # 볼 필요도 없는 구문부터 넣어주기
    print ("운영을 종료합니다")
    break
  if money == 300:
    print ("coffee")
    coffee -= 1
  elif money < 300:
    print (f"{money}원을 반환합니다")
  else:
    print ("coffee")
    coffee -= 1
    print (f"{money - 300}원을 반환합니다")
  
print ("커피가 소진되었습니다. 관리자에게 문의해주세요")

"""##### 잔액 표시해주는 ??"""

coffee = 5
ex_money = 0

while coffee > 0:
  money = int (input ("금액을 입력해주세요 "))
  money = money + ex_money
  if money == 300:
    print ("coffee")
    coffee -= 1
    money = money - 300
  elif money < 300:
    print ("돈이 모자랍니다. 추가로 금액을 입력해주세요")
    ex_money = money
    continue
  else:
    print ("coffee")
    coffee -= 1
    print (f"{money-300}원을 반환합니다")
  ex_money = 0
print ("커피가 소진되었습니다")

"""##### 구구단 1단부터 9단까지 출력하기"""

for i in range (2, 10):
  for j in range (1, 10):
    print (f"{i} x {j} = {i*j}")
print ("끝")

"""##### 별찍기"""

...

"""##### 자판기

- 커피 (300) 코코아(200) 율무차(300) 판매
- 재고는 각각 5잔 
- 변수는 coffee, cocoa, yulmu
- 사용자가 가진 돈 변수명 money  

> 3000원을 입력하고 커피 3, 코코아2, 율무 4 뽑으면  
거스름돈은 500원입니다. 남은 커피는 2, 코코아는 3, 율무는 1입니다

> 2000원을 입력하고 커피2, 코코아5, 율무1 뽑으면  
거스름돈은 100원입니다. 남은 커피는 3, 코코아는 0, 율무는 4
"""

money = int (input ("돈을 넣어주세요 "))
coffee, cocoa, yulmu = [int (x) for x in input("입력").split(', ')]
print (coffee)
print (f"거스름돈은 {money - 300*coffee - 200*cocoa - 300*yulmu}원입니다. 
남은 커피는 {5-coffee}잔, 코코아는 {5-cocoa}잔, 율무차는 {5-yulmu}잔입니다")

"""##### 약수 찾기
- 100 이하의 자연수 중에서 5의 배수를 모두 찾아서 출력
"""

for i in range(1, 101)
if i % 5 == 0:
    print (i)

print ([i for i in range(1, 101) if i % 5 == 0])

"""##### 단어 개수 구하기"""

news1 = "earn champion products ch approves stock split champion products inc said its board of directors approved a two for one stock split of its common shares for shareholders of record as of april the company also said its board voted to recommend to shareholders at the annual meeting april an increase in the authorized capital stock from five mln to mln shares reuter"
news2 = "acq  computer terminal systems cpml completes sale computer terminal systems inc said it has completed the sale of shares of its common stock and warrants to acquire an additional one mln shares to sedio n v of lugano switzerland for dlrs the company said the warrants are exercisable for five years at a purchase price of dlrs per share computer terminal said sedio also has the right to buy additional shares and increase its total holdings up to pct of the computer terminal s outstanding common stock under certain circumstances involving change of control at the company the company said if the conditions occur the warrants would be exercisable at a price equal to pct of its common stock s market price at the time not to exceed dlrs per share computer terminal also said it sold the technolgy rights to its dot matrix impact technology including any future improvements to woodco inc of houston tex for dlrs but it said it would continue to be the exclusive worldwide licensee of the technology for woodco the company said the moves were part of its reorganization plan and would help pay current operation costs and ensure product delivery computer terminal makes computer generated labels forms tags and ticket printers and terminals reuter"
news3 = "earn cobanco inc cbco year net shr cts vs dlrs net vs assets mln vs mln deposits mln vs mln loans mln vs mln note th qtr not available year includes extraordinary gain from tax carry forward of dlrs or five cts per shr reuter"
news4 = "earn am international inc am nd qtr jan oper shr loss two cts vs profit seven cts oper shr profit vs profit revs mln vs mln avg shrs mln vs mln six mths oper shr profit nil vs profit cts oper net profit vs profit revs mln vs mln avg shrs mln vs mln note per shr calculated after payment of preferred dividends results exclude credits of or four cts and or nine cts for qtr and six mths vs or six cts and or cts for prior periods from operating loss carryforwards reuter"
news5 = "earn brown forman inc bfd th qtr net shr one dlr vs cts net mln vs mln revs mln vs mln nine mths shr dlrs vs dlrs net mln vs mln revs billion vs mln reuter"

news = [news1, news2, news3, news4, news5]

len (set (news[0].split()))

# print ([i for i in range(1, 6) len (set (news[i].split()))])

"""##### funcion definition"""

def add(a, b) :
  # 입력받은 a, b값을 돌려주는 함수
  c = a + b
  return c
add(10, 11)

"""##### 사칙연산 함수"""

def sub(a, b):
  c = a - b
  return c
sub(10, 11)

def mul(a, b):
  c = a * b
  return c
mul(10, 0)

def div (a, b):
  c = a / b
  return c
div (10, 11)

# 덧셈함수
def add(a, b) :
  c = a + b
  return c

# 뺄셈함수
def sub(a, b):
  c = a - b
  return c

# 곱셈함수
def mul(a, b):
  return a * b

# 나눗셈함수
def div (a, b):
  if b == 0:
    return 0
  return  a / b

a = 10
b = 0  
print ("덧셈", add(a, b))
print ("뺄셈", sub(a, b))
print ("곱셈", mul(a, b))
print ("나눗셈", div(a, b))

"""##### 함수의 파라미터 변수 이름과 함수를 호출하는 argument 이름이 같은 경우"""

def change_name(name):
  name = 'lee'
  print ('in function: ', name)
  # return name

name = 'kim'
# name = change_name(name)
change_name(name)
print (name)

def full_name(last, first):
  print (f"풀네임은 {last + first}")

a = '최'
b = '은진'
full_name(a, b)